"""
Django settings for app project.

Generated by 'django-admin startproject' using Django 1.8.4.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os
from django.utils.crypto import get_random_string

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '3wtq(@5pfch0dceirp)$gsnr#hz-nkx6@q#91@o96cx+de&ka('

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = (
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'backend',
    'rest_framework',
)

REST_FRAMEWORK = {
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
        'rest_framework_xml.renderers.XMLRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ),
    'EXCEPTION_HANDLER': 'backend.exceptions.custom_exception_handler',
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
}

MIDDLEWARE_CLASSES = (
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
)

ROOT_URLCONF = 'app.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'app.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.8/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': '{{ database_name }}',
        'USER': '{{ database_username }}',
        'PASSWORD': '{{ database_user_password }}',
        'HOST': '127.0.0.1',
        'PORT': '5432',
    }
}

# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.8/howto/static-files/

STATIC_URL = '/static/'

# Since we cannot have a salt for each account, we have one per application.
STATIC_SALT = get_random_string()

# Celery configuration #
from kombu import Queue

CELERY_QUEUES = (
    Queue('events_queue', routing_key='event_key'),
)

CELERY_ROUTES = {
    'backend.events.createLambdaInstance': {
        'queue': 'events_queue',
        'routing_key': 'event_key'
    },
    'backend.events.updateLambdaInstanceStatus': {
        'queue': 'events_queue',
        'routing_key': 'event_key'
    },
    'backend.events.deleteLambdaInstance': {
        'queue': 'events_queue',
        'routing_key': 'event_key'
    },
    'backend.events.updateLambdaApplicationStatus': {
        'queue': 'events_queue',
        'routing_key': 'event_key'
    },
    'backend.events.createLambdaApplication': {
        'queue': 'events_queue',
        'routing_key': 'event_key'
    },
    'backend.events.deleteLambdaApplication': {
        'queue': 'events_queue',
        'routing_key': 'event_key'
    },
    'backend.events.incrementApplicationStartedCounter': {
        'queue': 'events_queue',
        'routing_key': 'event_key'
    },
    'backend.events.decrementApplicationStartedCounter': {
        'queue': 'events_queue',
        'routing_key': 'event_key'
    },
}

CELERY_IMPORTS = ('backend.events', )
